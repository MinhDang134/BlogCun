from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import os
from datetime import datetime

VERSIONS_DIR = 'versions'

class APIHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/api.php':
            try:
                # L·∫•y phi√™n b·∫£n m·ªõi nh·∫•t t·ª´ th∆∞ m·ª•c versions
                files = [f for f in os.listdir(VERSIONS_DIR) if f.startswith('database') and f.endswith('.json')]
                if not files:
                    # N·∫øu kh√¥ng c√≥ file n√†o, t·∫°o file m·ªõi
                    latest_file = os.path.join(VERSIONS_DIR, 'database.json')
                    os.makedirs(VERSIONS_DIR, exist_ok=True)
                    with open(latest_file, 'w', encoding='utf-8') as f:
                        json.dump({
                            "profile": {
                                "name": "C√∫n",
                                "nickname": "C√∫n cute üòä",
                                "about": "M√¨nh l√† m·ªôt ng∆∞·ªùi y√™u th√≠ch c√¥ng ngh·ªá v√† s√°ng t·∫°o. M√¨nh th√≠ch kh√°m ph√° nh·ªØng ƒëi·ªÅu m·ªõi m·∫ª, ƒë·ªçc s√°ch v√† nghe nh·∫°c. M√¨nh lu√¥n c·ªë g·∫Øng s·ªëng t√≠ch c·ª±c v√† lan t·ªèa nƒÉng l∆∞·ª£ng t·ªët ƒë·∫øn m·ªçi ng∆∞·ªùi xung quanh.",
                                "slogan": "\"H√£y s·ªëng nh∆∞ m·ªôt b√¥ng hoa, t·ªèa h∆∞∆°ng th∆°m ng√°t cho ƒë·ªùi üå∏\""
                            }
                        }, f, ensure_ascii=False, indent=4)
                else:
                    # L·∫•y file m·ªõi nh·∫•t
                    latest_file = os.path.join(VERSIONS_DIR, max(files, key=lambda x: os.path.getctime(os.path.join(VERSIONS_DIR, x))))
                
                with open(latest_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps(data).encode())
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'error': str(e)}).encode())

    def do_POST(self):
        if self.path == '/api.php':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            try:
                data = json.loads(post_data.decode('utf-8'))
                
                # T·∫°o t√™n file m·ªõi d·ª±a tr√™n th·ªùi gian
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                new_file = os.path.join(VERSIONS_DIR, f'database_{timestamp}.json')
                
                # ƒê·∫£m b·∫£o th∆∞ m·ª•c versions t·ªìn t·∫°i
                os.makedirs(VERSIONS_DIR, exist_ok=True)
                
                # Th√™m th·ªùi gian v√†o d·ªØ li·ªáu
                data['saved_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                
                # L∆∞u d·ªØ li·ªáu v√†o file m·ªõi
                with open(new_file, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=4)
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                self.wfile.write(json.dumps({'success': True}).encode())
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'error': str(e)}).encode())

    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

if __name__ == '__main__':
    server_address = ('', 8082)
    httpd = HTTPServer(server_address, APIHandler)
    print('Server running on port 8082...')
    httpd.serve_forever() 